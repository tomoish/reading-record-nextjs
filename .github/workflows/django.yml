name: Django CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: "Production â€“ reading-record-nextjs"
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10"]

    services:
      postgres:
        image: postgres:14.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: generate .env
        run: chmod +x backend/set-up-env.test.sh && sh backend/set-up-env.test.sh
        env:
          DATABASE_URL: postgres_url
          DATABASE_DB: postgres
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          SECRET_KEY: test
          ALLOWED_HOSTS: localhost
          DEBUG: "True"
          CSRF_TRUSTED_ORIGINS: http://localhost:8000
          CORS_ALLOWED_ORIGINS: http://localhost:8000
      - name: Run Tests
        run: |
          cd backend
          python manage.py makemigrations
          python manage.py migrate
          python manage.py test
      - name: deploy
        run: |
          echo "$AWS_SECRET_KEY" > secret_key
          chmod 600 secret_key
          ssh -oStrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} -i secret_key "cd ~/reading-record-nextjs \
          && git pull origin main\
          && sudo docker compose down\
          && sudo docker compose -f docker-compose.prod.yml up -d --build\
          && sudo docker compose exec web python manage.py makemigrations\
          && sudo docker compose exec web python manage.py migrate --noinput"
    env:
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_HOST: ${{ secrets.EC2_HOST }}

